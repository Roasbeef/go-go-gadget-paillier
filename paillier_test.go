package paillier

import (
	"crypto/rand"
	"math/big"
	"testing"
)

func params1024() (*PrivateKey, error) {

	n := new(big.Int)
	n.SetString("132989409112355228761579415457488433907688906677593349228013438645565839957100608462293264591894615668222295879861103227867769615052249603407285709399529034095805390029151207343268742858117923828477297771438299333052318684739524226934174877932946918091645736270444081658156432079768051878897861362590750992309", 10)

	nsq := new(big.Int)
	nsq.SetString("17686182936053391954748194166580545207107097156510995176655103644989384809792251656977531432216162839511674713279071401145892641857346696768783183953813936354916800566991800880147198981533269900563138086805653525266069400621975156122471225058082979664317860302674032237783008768479513105845275279213945201974678562901328822211308121867545747776320641629714176882318033929624954854851292289021771524079090424793672423351955124758546823991762745751533553812037246339732914451955063666959360170472161854488310809563092559564682891982654701593442111015478639207871305499005675040689505277401902038067807264630068177151481", 10)

	g := new(big.Int)
	g.SetString("132989409112355228761579415457488433907688906677593349228013438645565839957100608462293264591894615668222295879861103227867769615052249603407285709399529034095805390029151207343268742858117923828477297771438299333052318684739524226934174877932946918091645736270444081658156432079768051878897861362590750992310", 10)

	l := new(big.Int)
	l.SetString("132989409112355228761579415457488433907688906677593349228013438645565839957100608462293264591894615668222295879861103227867769615052249603407285709399529010930067426197840055874471347309119487638453509981280566883313029825896865929070075404671799814158933531193094080164946796838672623671207176193141259297004", 10)

	u := new(big.Int)
	u.SetString("27978196296067113345228212505074452971999659596003813606274518462689762495720314198357290921961949015362199152004628530628155083858035029005374728247734258386817094532004049229074251693254121672987427269820391778936785593510244947980538250572640574657723746035990290084495918014642407600561061264338532887949", 10)

	return &PrivateKey{
		PublicKey: PublicKey{
			N:        n,
			NSquared: nsq,
			G:        g, // g = n + 1
		},
		L: l,
		U: u,
	}, nil
}

func params2048() (*PrivateKey, error) {

	n := new(big.Int)
	n.SetString("24842621598753006699910848307571369745444040103729114038565327313437917071560538687235248564783885333926972291165652032799580469839472074590585139929355068675691514935749843674423685644220388096791337044403174469774955914907680731309445583378641838637856891163457215954494409924974285235648665187961212568008891042637985379146688124404421004461219663729140839314213844178084541124375185536162331780586598491606670646647699552826773251892522781648596634615538982399787315544821063302217039085298957518383901407286626680195175786219699709590705894092775189976458535735589933604125784688922582739590005169449353697122387", 10)

	nsq := new(big.Int)
	nsq.SetString("617155847898829394617854908770459140285801497879814299947145279175705823184604797136026316885284859544142344659426926472011607897587862151324705764051009800032369313846650259871251109075169299716085423158136247446966065902891134107612139330156195116611454234713157522625276846198719656255340100819758635674934827590148563206526956807674708767060461019576283716957703642193526961436377343433686431646557229484221130279776918168524759175182234725975347588875920384642314998295732908170783915284110681358349470981469984883054127829658975959757236432601505901250211992606817337419537115719454904346042237503814378253099931670242864350678546201489610236372168691056961039719579334959116839306475384199703662420504549204209360080975456378197418042808366206723974303549538227197545250195931786877761094687895691555285857925576629598089284110512944169336076597007586359222330872032807933329862230732640533864402364064283136488116803731538142280459847975569792170916862212891191372896706596488778167364624474735786320000888927752563954406929643127471303426369812554534570321068225240865678030318387768342661879488335608839954564292081472388674836933426144940443892870981756153697349067731705849031461704539369002580842256354363910844456577769", 10)

	g := new(big.Int)
	g.SetString("24842621598753006699910848307571369745444040103729114038565327313437917071560538687235248564783885333926972291165652032799580469839472074590585139929355068675691514935749843674423685644220388096791337044403174469774955914907680731309445583378641838637856891163457215954494409924974285235648665187961212568008891042637985379146688124404421004461219663729140839314213844178084541124375185536162331780586598491606670646647699552826773251892522781648596634615538982399787315544821063302217039085298957518383901407286626680195175786219699709590705894092775189976458535735589933604125784688922582739590005169449353697122388", 10)

	l := new(big.Int)
	l.SetString("24842621598753006699910848307571369745444040103729114038565327313437917071560538687235248564783885333926972291165652032799580469839472074590585139929355068675691514935749843674423685644220388096791337044403174469774955914907680731309445583378641838637856891163457215954494409924974285235648665187961212568008574794600278939851766519441049362920617574406831792194593659444026338800174854022652329160738125011430437307274862976783843167512093895422524067848856685464742294592562054013175124217980972460267498005219652033007440672912735608680631007723775648932207779135222657008221553175293007118196296205795910345367080", 10)

	u := new(big.Int)
	u.SetString("24625144112844747286412301625922778913397924449367993706761784186480489319582252614656379303429455320045739161766017671963316392824990575269767625904331050694749644078600450864072325487211930208182506576342704045258217810645129589076717072971119385421393543629479637692099123381056514549663744571550856670449067773948991968423462606312378005458412798474289222068246665148179364313373040324698581470813281757334950128350143224748183955087233406276627955178933953036238464062292677413298532510441245486116757907709062600497628891952553522564432360599389935309767189044160341659753221624147878814668942361477868725998183", 10)

	return &PrivateKey{
		PublicKey: PublicKey{
			N:        n,
			NSquared: nsq,
			G:        g, // g = n + 1
		},
		L: l,
		U: u,
	}, nil
}

func params3072() (*PrivateKey, error) {

	n := new(big.Int)
	n.SetString("4233421648514535164192623607124070717725376967054769280199683763668971863281543898428023925059857895640476734242454268795099257758188626988304256251939841660326327986651429504061643508081066974604594623613615378177694373612920749933896199478778033970797511134362268378728990588400700095587513417472980122073567753312351171004948567614197777839509905960580489344296644504403104943341446772642706395500147243493967523908746040345737265039680877986544241050283556112313860759272283241843539071024702893830184299500765856826751100381535464122067622779705613066196890939190900342853934292017063102432895873325497770808365065401443865748154800642100093881875445825471588083684402212969711576674185635561661753758623430849502755362027949115862298161572516247906844795735103647730274457865856695619696922329584053227472737777335341305840277744416150223055856010211955931479789325159952240683089992350394738316521279548928145850185407", 10)

	nsq := new(big.Int)
	nsq.SetString("17921858854111524509765320875820506131203830786786823581654210069534605080944498359400907846074368151070141569567931027695212601464828290363386594484163113727485936330484091531223093040350992894306912577923357832023914683674450735778355946906201803146866045239163374490879511391410250054239407590444707063049095926908859426888297297799102765116439451598595274036974132527094066873579207530790887010714549737493185585728846327243986762484692031700815138326424676329711507009113166781132707662307943202477827155377196057212083490766460127152037610815747300523930108524255046845227402307940783594429652438370385474658255779833030837715468818288025928500118193625767223449849263777972839254862329481487794858906988171823516965808634547931567175569071302520600820070609644005877914605011356732536487819066060363590380765864152222868475379972311331142461281085668073826881648224130328203090734952095959238645280629061723097054231419310314171516102563630492817633967375937925210329058253568743863779429398306307010187296133057826997524847731040541343479475623635179494451534256019140531883452985939022858513108794676884847136483144302674709449645498933327099726257795968448539187287526774218645966535149185790155600112481699602128783798703769562288539988643525930621350977474681149769474051539572153634966201185124771753742847022030279472794560601963527461311964599687044145665043891211248992629390996409573105760019500649766986653438840299527518602908892626158263840712317200060873931481719634848319061821852834503206304398923977847156911014775400194585507403843929734132398051515383582945143617479314686207323205872167809350954786262544460194812411074776730103467871592646999801719035215804864165657679494988236996816799844153180777862986242661160704200229618223971636318707933030045521282043424045877782807917831587212782897296128073528463975256275755649", 10)

	g := new(big.Int)
	g.SetString("4233421648514535164192623607124070717725376967054769280199683763668971863281543898428023925059857895640476734242454268795099257758188626988304256251939841660326327986651429504061643508081066974604594623613615378177694373612920749933896199478778033970797511134362268378728990588400700095587513417472980122073567753312351171004948567614197777839509905960580489344296644504403104943341446772642706395500147243493967523908746040345737265039680877986544241050283556112313860759272283241843539071024702893830184299500765856826751100381535464122067622779705613066196890939190900342853934292017063102432895873325497770808365065401443865748154800642100093881875445825471588083684402212969711576674185635561661753758623430849502755362027949115862298161572516247906844795735103647730274457865856695619696922329584053227472737777335341305840277744416150223055856010211955931479789325159952240683089992350394738316521279548928145850185408", 10)

	l := new(big.Int)
	l.SetString("4233421648514535164192623607124070717725376967054769280199683763668971863281543898428023925059857895640476734242454268795099257758188626988304256251939841660326327986651429504061643508081066974604594623613615378177694373612920749933896199478778033970797511134362268378728990588400700095587513417472980122073567753312351171004948567614197777839509905960580489344296644504403104943341446772642706395500147243493967523908746040345737265039680877986544241050283556108198686566233636195409432419206180591124453947844629141217916090283632636822559389465828624624361574257208125531514000852299857840411073189340030126842166725158750305670131003783273709388884589307897926772457685259918955324823437665917796433158880954683928673820501237494077193272160977139002336040538744604820911601602045829029598380206800146924258440154956541672359238218295915236503327900847454430681066784385757729564759666301118773969371697682841841463286160", 10)

	u := new(big.Int)
	u.SetString("2128786688915223642348086448556137111195210768726296660125624483683922909098202137902315778372864264494337293707674706020792151529184969657802036982210551474787853184347518900899753787007591876051273732669848331308182222991414263732664219872882602219889331418065769444707979965794145570717923969607846754897697549971705692649814243922319266418621039483191818904857467782824121827494412255112203132143770324315602818091602625640639745635541184800728587494126829315403651126193701672375570276506698261248660138656078637166176312315329713088977587149647547182218277683117629760784273265574943865557723861495617203032340692589646125634571200265671409432701211441344297002025345853584952147068234312378490133084019384730122563051162477338069553022079347807711911813909990856685043141412452126453946090770013689412832781166395555010984385025641836954732548271667968886479666188836193482075454895501985366747968124149508327134483258", 10)

	return &PrivateKey{
		PublicKey: PublicKey{
			N:        n,
			NSquared: nsq,
			G:        g, // g = n + 1
		},
		L: l,
		U: u,
	}, nil
}

func params4096() (*PrivateKey, error) {

	n := new(big.Int)
	n.SetString("56863325828177038326393710756876178897890116984140692064513359235531219599005847695925902696596404786845074694491942997679491962443466794670497528079635980705723855342394349213465232817470998503020643982102580782977056832760944222870238380374769291301725269872718292918390747212381644289332451714980406039610147672354659497025734831709299263500679168676871191329570781994380160358231653341302145578754166136787150809324559311450232734819173935374728491470652656847618388649677515414286371057684759119376090340821726708080137533509774455974684771812417680681124943212067218705694939305137085005218589803837089217586950272342183024477614946415082696204570486586263040312888852095544376504733996690874033024922580768015147026320754083133198275740102793293730319593844811742666762750808668976600309527171690023232038805355572716664444078370912539328802871405528357387252791639815969397784827378340770733196479144924023296615601593316223083345878922420519181130023367401354736502830375900309413267139247785040450827107332617832743623568111162267239928330812886131487366462802710464819377372020207995113033274119552255241146998105792341278711167325962562381473405962194437236534614230762013103682430217194110460978607651942586774751633103", 10)

	nsq := new(big.Int)
	nsq.SetString("3233437824241425861659570116525489590307493439183255759050633977267432211507056753749348933425418498124496731116522002481377337903319968972969196498599644200238981686386768905046728519650889084697061921692856576402157645967101730042173585472754028849360914629258099178658571774339039411479972266710224081002441011489870894785544878983370243620034159759326787929440791894555251733924988985365451511697117841639251298120728912960386899591924290003893701552085256841903007915979131028942222237723740515410885673850115332915845932374549505272111235093881102738593330891125146035800168778421835727007113026070796720171823303163687165445215215478066883885271529952658466703019303073909912034083297088445642942027883727534966302018828753836270098893583825208345640186002292433768742056636930101413389247101426572875214128224193730942208037741547868843917866157548330230085867049192595052528696877202716396708342861537532062302459524734016278130309226359073770599543905584061125770506888100034408048441344760192952668370046112371345865166664091516770250339835142416887647917365954443599204507757603250793578504737795636192027410312100986419260540760258910833654425648004573491003099290190148035211821280833570886088027322956009892128414502735588253347656016933605877658377599903331168034534609317331876174939809094412457736065349826372068143931074980757910622187620881068472013225330917412926161790978463161671739287626016087167271755666998527936433569302338697584994339343161526782785628316704084938855187661717072167705219743237017463182065677204639484888986134174485922439437657798600036965079755000628968044846147789094947264195217245016349851347195904026592133782313926003969510321644899563373366634510727855714313685641742558435746827513299906598529333824860473681045761007108611590254959780500297791409735102706519868356846039924063583459730578434920166581530065230085821418408617182522049272213643829123990622643895564733486736911858031782437063128215974486987157680539577674221388167136073984615529779962744759063795963311793325046202135632089025290380850988494456180390235681918489082803955821279399049767705787204774908442920910096930654198889918349619710027554666269723077204481648670860276120735980727446132641604815505804614372707146140871147480322054536999651104488204217466353899381917321273221385456230794616468405215438099420123298942644186126075581331998063274205705931938099771735656412588963626862653135178483841537644308146618028026141711765525408609", 10)

	g := new(big.Int)
	g.SetString("56863325828177038326393710756876178897890116984140692064513359235531219599005847695925902696596404786845074694491942997679491962443466794670497528079635980705723855342394349213465232817470998503020643982102580782977056832760944222870238380374769291301725269872718292918390747212381644289332451714980406039610147672354659497025734831709299263500679168676871191329570781994380160358231653341302145578754166136787150809324559311450232734819173935374728491470652656847618388649677515414286371057684759119376090340821726708080137533509774455974684771812417680681124943212067218705694939305137085005218589803837089217586950272342183024477614946415082696204570486586263040312888852095544376504733996690874033024922580768015147026320754083133198275740102793293730319593844811742666762750808668976600309527171690023232038805355572716664444078370912539328802871405528357387252791639815969397784827378340770733196479144924023296615601593316223083345878922420519181130023367401354736502830375900309413267139247785040450827107332617832743623568111162267239928330812886131487366462802710464819377372020207995113033274119552255241146998105792341278711167325962562381473405962194437236534614230762013103682430217194110460978607651942586774751633104", 10)

	l := new(big.Int)
	l.SetString("56863325828177038326393710756876178897890116984140692064513359235531219599005847695925902696596404786845074694491942997679491962443466794670497528079635980705723855342394349213465232817470998503020643982102580782977056832760944222870238380374769291301725269872718292918390747212381644289332451714980406039610147672354659497025734831709299263500679168676871191329570781994380160358231653341302145578754166136787150809324559311450232734819173935374728491470652656847618388649677515414286371057684759119376090340821726708080137533509774455974684771812417680681124943212067218705694939305137085005218589803837089217586935176781464448201563089771929468498170827084643097661927277578188106683340056444633823901895462425724485744949328857194047153598703023572662507807304563684919636647673178633597184770950716873147461113447746416843913092154241021075064569069244254562376128993320254232773320909850642846562001875349549822712098480259105512619306056478709779051490825901634193324650449091077979370911542121439429434345727527183980150307103712673253063084166527562442703758305003732483802814105719330011602626274062586926585147981575655494761740415701731596759736802453447524489900246659724878681108319641696155178271760178366816882011240", 10)

	u := new(big.Int)
	u.SetString("30404103333948440741195658375358672078721265467715386899517323101978785533782993758412478186877676049090311180395544984596302863843245655241076832731963042149181101840119017387127991300276135053105062940595260512271973409967903332536148126821650475252368828109824007957768029039582399184084673709947723465111588410721226352254236391640404620622905135515179395931501284253201371843680609080311854379039353675821747457472974076215664424572902716606353249498497391036642325405223453596317094076703614988601268213829607817646139661419465248157384174679431009981374871368240412720785006409117202524157947620600448591602258341947272766969123079358671403022339338356295963343994007625209678502105321632314451906401009998048890208985743562010672163856480756556396615218963303926590084433868587511270566455833693970648548502629853994349351958350610699289901931985654000949077731144070915502431268069596670606831115990442165270372658455121015057194241585437696791695323420367592820172828513769012784687972164444625129144455872526726282370473453166609666095067535004315906628662171509769438390513256227382458164219075408664321539387775546866033176765246589495272525862205692413521848153324865745214136426859675205377021819280675932554456599118", 10)

	return &PrivateKey{
		PublicKey: PublicKey{
			N:        n,
			NSquared: nsq,
			G:        g, // g = n + 1
		},
		L: l,
		U: u,
	}, nil
}

func benchmarkKey(size int, b *testing.B) {
	for n := 0; n < b.N; n++ {
		GenerateKey(rand.Reader, size)
	}
}

func benchmarkEncryptionSmall(f func() (*PrivateKey, error), b *testing.B) {
	m := new(big.Int).SetInt64(42)
	privKey, err := f()
	if err != nil {
		println("error")
	}
	for n := 0; n < b.N; n++ {
		Encrypt(&privKey.PublicKey, m.Bytes())
	}
}

func benchmarkEncryptionLarge(f func() (*PrivateKey, error), b *testing.B) {
	m := new(big.Int)
	m.SetString("9601375721773960030826048348718350956180868954786249183055522621772391594913965263068361191091587324151101807311169301869981191762119859865346892157945421998951222949069729370836921713919282283633399891943869137940899827469813950721928452427835958620445001112962904065293585229146038515621140909326729", 10)
	privKey, err := f()
	if err != nil {
		println("error")
	}
	for n := 0; n < b.N; n++ {
		Encrypt(&privKey.PublicKey, m.Bytes())
	}
}

func benchmarkDecryptionSmall(f func() (*PrivateKey, error), b *testing.B) {
	m := new(big.Int).SetInt64(42)
	privKey, err := f()
	if err != nil {
		println("error")
	}
	c, err := Encrypt(&privKey.PublicKey, m.Bytes())
	if err != nil {
		println("error")
	}

	for n := 0; n < b.N; n++ {
		Decrypt(privKey, c)
	}
}

func benchmarkDecryptionLarge(f func() (*PrivateKey, error), b *testing.B) {
	m := new(big.Int)
	m.SetString("9601375721773960030826048348718350956180868954786249183055522621772391594913965263068361191091587324151101807311169301869981191762119859865346892157945421998951222949069729370836921713919282283633399891943869137940899827469813950721928452427835958620445001112962904065293585229146038515621140909326729", 10)
	privKey, err := f()
	if err != nil {
		println("error")
	}
	c, err := Encrypt(&privKey.PublicKey, m.Bytes())
	if err != nil {
		println("error")
	}

	for n := 0; n < b.N; n++ {
		Decrypt(privKey, c)
	}
}

func benchmarkAddition(f func() (*PrivateKey, error), b *testing.B) {

	ms := new(big.Int).SetInt64(42)
	m := new(big.Int)
	m.SetString("9601375721773960030826048348718350956180868954786249183055522621772391594913965263068361191091587324151101807311169301869981191762119859865346892157945421998951222949069729370836921713919282283633399891943869137940899827469813950721928452427835958620445001112962904065293585229146038515621140909326729", 10)
	privKey, errz := f()
	if errz != nil {
		println("error")
	}
	c, err := Encrypt(&privKey.PublicKey, m.Bytes())
	cs, errs := Encrypt(&privKey.PublicKey, ms.Bytes())
	if err != nil {
		println("error")
	}

	if errs != nil {
		println("error")
	}

	for n := 0; n < b.N; n++ {
		AddCipher(&privKey.PublicKey, c, cs)
	}
}

func BenchmarkKey1024(b *testing.B) { benchmarkKey(1024, b) }
func BenchmarkKey2048(b *testing.B) { benchmarkKey(2048, b) }
func BenchmarkKey3072(b *testing.B) { benchmarkKey(3072, b) }
func BenchmarkKey4096(b *testing.B) { benchmarkKey(4096, b) }

func BenchmarkEncryptionSmall1024(b *testing.B) { benchmarkEncryptionSmall(params1024, b) }
func BenchmarkEncryptionSmall2048(b *testing.B) { benchmarkEncryptionSmall(params2048, b) }
func BenchmarkEncryptionSmall3072(b *testing.B) { benchmarkEncryptionSmall(params3072, b) }
func BenchmarkEncryptionSmall4096(b *testing.B) { benchmarkEncryptionSmall(params4096, b) }

func BenchmarkEncryptionLarge1024(b *testing.B) { benchmarkEncryptionLarge(params1024, b) }
func BenchmarkEncryptionLarge2048(b *testing.B) { benchmarkEncryptionLarge(params2048, b) }
func BenchmarkEncryptionLarge3072(b *testing.B) { benchmarkEncryptionLarge(params3072, b) }
func BenchmarkEncryptionLarge4096(b *testing.B) { benchmarkEncryptionLarge(params4096, b) }

func BenchmarkDecryptionSmall1024(b *testing.B) { benchmarkDecryptionSmall(params1024, b) }
func BenchmarkDecryptionSmall2048(b *testing.B) { benchmarkDecryptionSmall(params2048, b) }
func BenchmarkDecryptionSmall3072(b *testing.B) { benchmarkDecryptionSmall(params3072, b) }
func BenchmarkDecryptionSmall4096(b *testing.B) { benchmarkDecryptionSmall(params4096, b) }

func BenchmarkDecryptionLarge1024(b *testing.B) { benchmarkDecryptionLarge(params1024, b) }
func BenchmarkDecryptionLarge2048(b *testing.B) { benchmarkDecryptionLarge(params2048, b) }
func BenchmarkDecryptionLarge3072(b *testing.B) { benchmarkDecryptionLarge(params3072, b) }
func BenchmarkDecryptionLarge4096(b *testing.B) { benchmarkDecryptionLarge(params4096, b) }

func TestPrintParams(t *testing.T) {

	// Generate a 128-bit private key.
	privKey, err := GenerateKey(rand.Reader, 4092)
	if err != nil {
		t.Fatalf("Unable to generate private key: ", err)
	}

	// Encrypt the integer 15.
	m15 := new(big.Int).SetInt64(15)
	c15, err := Encrypt(&privKey.PublicKey, m15.Bytes())
	if err != nil {
		t.Fatalf("Unable to encrypt plain text: ", err)
	}

	// Encrypt the integer 20.
	m20 := new(big.Int).SetInt64(20)
	c20, err := Encrypt(&privKey.PublicKey, m20.Bytes())
	if err != nil {
		t.Fatalf("Unable to encrypt plain text: ", err)
	}

	// Now homomorphically add the encrypted integers.
	addedCiphers := AddCipher(&privKey.PublicKey, c15, c20)

	// When decrypted, the result should be 15+20 = 35
	plaintext, err := Decrypt(privKey, addedCiphers)
	if err != nil {
		t.Fatalf("Unable to decrypted cipher text: ", err)
	}
	decryptedInt := new(big.Int).SetBytes(plaintext)
	if decryptedInt.Cmp(new(big.Int).SetInt64(35)) != 0 {
		t.Fatalf("Incorrect. Plaintext decrypted to %v should be %v",
			decryptedInt.String(), 35)
	}

}

func TestCorrectness(t *testing.T) {
	// Generate a 128-bit private key.
	privKey, err := GenerateKey(rand.Reader, 128)
	if err != nil {
		t.Fatalf("Unable to generate private key: ", err)
	}

	// Encrypt the integer 15.
	m := new(big.Int).SetInt64(15)
	c, err := Encrypt(&privKey.PublicKey, m.Bytes())
	if err != nil {
		t.Fatalf("Unable to encrypt plain text: ", err)
	}

	// Now decrypt the cipher text. Should come back out to 15.
	d, err := Decrypt(privKey, c)
	if err != nil {
		t.Fatalf("Unable to decrypt cipher text: ", err)
	}
	originalInt := new(big.Int).SetBytes(d)
	if originalInt.Cmp(m) != 0 { // originalInt != 15
		t.Fatalf("Scheme is not correct. Got %v back should've got %v",
			originalInt.String(), m.String())
	}
}

func TestHomomorphicCipherTextAddition(t *testing.T) {
	// Generate a 128-bit private key.
	privKey, err := GenerateKey(rand.Reader, 128)
	if err != nil {
		t.Fatalf("Unable to generate private key: ", err)
	}

	// Encrypt the integer 15.
	m15 := new(big.Int).SetInt64(15)
	c15, err := Encrypt(&privKey.PublicKey, m15.Bytes())
	if err != nil {
		t.Fatalf("Unable to encrypt plain text: ", err)
	}

	// Encrypt the integer 20.
	m20 := new(big.Int).SetInt64(20)
	c20, err := Encrypt(&privKey.PublicKey, m20.Bytes())
	if err != nil {
		t.Fatalf("Unable to encrypt plain text: ", err)
	}

	// Now homomorphically add the encrypted integers.
	addedCiphers := AddCipher(&privKey.PublicKey, c15, c20)

	// When decrypted, the result should be 15+20 = 35
	plaintext, err := Decrypt(privKey, addedCiphers)
	if err != nil {
		t.Fatalf("Unable to decrypted cipher text: ", err)
	}
	decryptedInt := new(big.Int).SetBytes(plaintext)
	if decryptedInt.Cmp(new(big.Int).SetInt64(35)) != 0 {
		t.Fatalf("Incorrect. Plaintext decrypted to %v should be %v",
			decryptedInt.String(), 35)
	}
}

func TestHomomorphicConstantAddition(t *testing.T) {
	// Generate a 128-bit private key.
	privKey, err := GenerateKey(rand.Reader, 128)
	if err != nil {
		t.Fatalf("Unable to generate private key: ", err)
	}

	// Encrypt the integer 15.
	m15 := new(big.Int).SetInt64(15)
	c15, err := Encrypt(&privKey.PublicKey, m15.Bytes())
	if err != nil {
		t.Fatalf("Unable to encrypt plain text: ", err)
	}

	// Attempt to add the plaintext constant "10" to our encrypted integer
	// "15".
	ten := new(big.Int).SetInt64(10)
	encryptedAdd := Add(&privKey.PublicKey, c15, ten.Bytes())
	plainText, err := Decrypt(privKey, encryptedAdd)
	if err != nil {
		t.Fatalf("Unable to decrypt cipher text: ", err)
	}
	decryptedInt := new(big.Int).SetBytes(plainText)

	// When decrypted, the result should be 15+10 = 25
	if decryptedInt.Cmp(new(big.Int).SetInt64(25)) != 0 {
		t.Fatalf("Incorrect. Plaintext decrypted to %v should be %v",
			decryptedInt.String(), 25)
	}

}

func TestHomomorphicConstantMultiplication(t *testing.T) {
	// Generate a 128-bit private key.
	privKey, err := GenerateKey(rand.Reader, 128)
	if err != nil {
		t.Fatalf("Unable to generate private key: ", err)
	}

	// Encrypt the integer 15.
	m15 := new(big.Int).SetInt64(15)
	c15, err := Encrypt(&privKey.PublicKey, m15.Bytes())
	if err != nil {
		t.Fatalf("Unable to encrypt plain text: ", err)
	}

	// Attempt to multiply our encrypted integer
	ten := new(big.Int).SetInt64(10)
	encryptedAdd := Mul(&privKey.PublicKey, c15, ten.Bytes())
	plainText, err := Decrypt(privKey, encryptedAdd)
	if err != nil {
		t.Fatalf("Unable to decrypt cipher text: ", err)
	}
	decryptedInt := new(big.Int).SetBytes(plainText)

	// When decrypted, the result should be 15*10 = 150
	if decryptedInt.Cmp(new(big.Int).SetInt64(150)) != 0 {
		t.Fatalf("Incorrect. Plaintext decrypted to %v should be %v",
			decryptedInt.String(), 150)
	}
}
